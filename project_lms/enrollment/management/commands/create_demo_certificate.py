from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from courses.models import Course, Lesson
from enrollment.models import Enrollment, LessonProgress, Certificate
from django.utils import timezone

User = get_user_model()

class Command(BaseCommand):
    help = 'Create demo learner, course, enroll them, mark complete and issue certificate'

    def handle(self, *args, **options):
        # Create or get a creator user
        creator, _ = User.objects.get_or_create(username='demo_creator', defaults={'email':'creator@example.com'})
        creator.role = getattr(__import__('django.conf').conf.settings, 'ROLE_CREATOR', 2)
        creator.set_password('password')
        creator.save()

        # Create or get a learner
        learner, _ = User.objects.get_or_create(username='demo_learner', defaults={'email':'learner@example.com'})
        learner.role = getattr(__import__('django.conf').conf.settings, 'ROLE_LEARNER', 1)
        learner.set_password('password')
        learner.save()

        # Create a course
        course, _ = Course.objects.get_or_create(title='Demo Course', defaults={'description':'Demo', 'creator': creator, 'status': Course.STATUS_PUBLISHED})

        # Ensure there are lessons
        if course.lessons.count() == 0:
            for i in range(1,4):
                Lesson.objects.create(course=course, title=f'Lesson {i}', content='Demo', order=i)

        # Enroll learner
        enrollment, created = Enrollment.objects.get_or_create(learner=learner, course=course)
        if created:
            self.stdout.write('Enrollment created')

        # Mark all lessons complete
        for lesson in course.lessons.all():
            progress, pc = LessonProgress.objects.get_or_create(enrollment=enrollment, lesson=lesson)
            progress.is_completed = True
            progress.completed_at = timezone.now()
            progress.save()

        # Mark enrollment completed
        enrollment.is_completed = True
        enrollment.completion_date = timezone.now()
        enrollment.save()

        # Issue certificate
        if not hasattr(enrollment, 'certificate'):
            cert = Certificate.objects.create(enrollment=enrollment)
            # Ensure serial_hash generated by model save() is available by reloading
            cert.refresh_from_db()
        else:
            cert = enrollment.certificate
            cert.refresh_from_db()

        self.stdout.write('Certificate serial_hash: ' + (cert.serial_hash or ''))
        self.stdout.write('Render URL: http://127.0.0.1:8000/api/v1/enrollment/certificate/render/' + (cert.serial_hash or '') + '/')
